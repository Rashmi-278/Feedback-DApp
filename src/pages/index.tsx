import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useForm } from 'react-hook-form';
import { Box, Button, FormControl, FormLabel, Input, Text, FormErrorMessage, VStack, Heading, Container, Center, Select } from '@chakra-ui/react';
import { SignProtocolClient, SpMode, EvmChains } from '@ethsign/sp-sdk';
import { useAccount, useWalletClient } from 'wagmi';
import { useSigner } from '../utils';

type FormData = {
  dappName: string;
  comments: string;
  rating: number;
};



const Home: NextPage = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>();
  const { address, isConnecting, isDisconnected } = useAccount()
  const client = new SignProtocolClient(SpMode.OnChain, {
    chain: EvmChains.arbitrumSepolia,
    account: walletClient
  });
  
  async function createNotaryAttestation(dappName: string, comments: string, rating: number, address:  any) {
    try {
      const res = await client.createAttestation({
        schemaId: "onchain_evm_421614_0xe8", // Use the appropriate schemaId for your attestations
        data: {
          dappName,
          comments,
          rating
        },
        indexingValue: address.toLowerCase(),
      });
      console.log('Attestation created:', res);
    } catch (error) {
      console.error('Error creating attestation:', error);
    }
  }
  const onSubmit = async (data: FormData) => {
    // Assume `signer` is the connected account from RainbowKit or window.ethereum
    const signer = useSigner();
    console.log(data);

    // Create an attestation using the submitted form data
    await createNotaryAttestation(data.dappName, data.comments, data.rating, address);
  };

  return (
    <Container maxW="container.md">
      <Head>
        <title>RainbowKit App</title>
        <meta content="Generated by @rainbow-me/create-rainbowkit" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <Box textAlign="center" py={10}>
        <Center py={10}>
          <ConnectButton />
        </Center>

        <Heading pt={10} as="h1" size="xl" mb={6}>
          Welcome to the Feedback DApp
        </Heading>

        <Text fontSize="lg" mb={8}>
          Now Attest your feedback about Apps!
        </Text>

        <VStack as="form" onSubmit={handleSubmit(onSubmit)} spacing={4} align="stretch">
          <FormControl isInvalid={!!errors.dappName}>
            <FormLabel htmlFor="dappName">DApp Name</FormLabel>
            <Input id="dappName" {...register('dappName', { required: 'DApp Name is required' })} />
            <FormErrorMessage>{errors.dappName && errors.dappName.message}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={!!errors.comments}>
            <FormLabel htmlFor="comments">Comments</FormLabel>
            <Input id="comments" {...register('comments', { required: 'Comments are required' })} />
            <FormErrorMessage>{errors.comments && errors.comments.message}</FormErrorMessage>
          </FormControl>

          <FormControl isInvalid={!!errors.rating}>
            <FormLabel htmlFor="rating">Rating</FormLabel>
            <Select id="rating" placeholder="Select rating" {...register('rating', { required: 'Rating is required' })}>
              <option value="0">0</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
            </Select>
            <FormErrorMessage>
              {errors.rating && 'Rating must be selected'}
            </FormErrorMessage>
          </FormControl>

          <Button colorScheme="purple" type="submit">
            Submit Feedback
          </Button>
        </VStack>
      </Box>

      <Box as="footer" py={8} textAlign="center">
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ❤️ at ETHOnline 2024
        </a>
      </Box>
    </Container>
  );
};

export default Home;
